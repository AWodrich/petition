//============ postgres and node =================//


connect to database from node.

module => pg
that one talks to the database

it talks postgres to postgres

it is able to send requests and receive responses

it connects to the server. client.connect();


my own server is going to connect to the pg server.

initialize them
and get back an object, named Client
using client you make reqs to the server

new pg.Client('postgres://username:password@localhost:5432/actors')
                protocol    json.file password,password, localhost, nameofDatabase


postgres cannot maintain multiple connects at once. so hyou cannot have a 100 connects at once.

100 people at the same moment giving input. that would be a problem.

with client.query it would be very slow.

solution: connection pooling!
you create a pool of connection. like 10. keeping those alive. ask the pool of connection.
if your done with those 10 it would put it back to the pool.

==================== PETETION PROJECT ==============================

NO ajax calls
but every page needs a handlebars page => rendered dynamically

express-handlebars
every route serves html
submit post method
get methods


sign area => canvas!! when mouse goes down, you draw a line from where the mouse was and now is.
                        per each mouse event it draws a line.

submit => submitting three things. first name, last name and the image data.
            canvases have a method. canvas.toDataUrl()
            browsers know how to read them.
            put this value into the src attribute of an img tag.
            add to the form (first name, last name, signature type='hidden'!!)
insert to the database

            post./petition
            get./petition

after signing petition
            thankyou page.handlebars => should have a link to the signers
                                    => prevent from signing again
                                    after you insert to database before redirecting to thankyou page, set cookie.
                                    so you check if cookie then redirect thankyou page, if not redirect to tmain page
select*from signature name! not the images.bc they are private information


middlewares:
body-parser
cookie-parser
express-static
express
create db

get routes =petition page
post =petition page

get  = signers page
    = thank you page

views dir
public dir




signatures are private information.
